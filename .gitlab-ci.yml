variables:
  VERSION: '1.4.0.$CI_PIPELINE_IID'
  DIR: '$CI_BUILDS_DIR/$CI_JOB_ID/$CI_PROJECT_NAME'
  
stages:
  - build
  - test
  - release

# First we run our tests
# We want to collect the results of the tests and show them in the merge request window later
# Also we are interested in the coverage

test_job:
  stage: test
  resource_group: build-single # we are sensitive to concurrent jobs, so we try to execute one pipeline after the other. Drop this if you are not on a dedicated machine.
  script:
    - 'Rename-Item .\ci-nuget.config nuget.config' # rename the nuget config file so that it is picked up by Nuget automatically
    - 'dotnet tool restore' # Install the local tools
    - 'dotnet test DotnetGitlabExample.sln --collect="XPlat Code Coverage" --logger:"junit;LogFilePath=testresult.xml"' # Run all tests, report them in JUNIT Format for Gitlab.
    - 'dotnet tool run reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"./coverage" --reporttypes:Cobertura' # Generate Code Coverage Reports
  artifacts: # upload files so Gitlab can show them in the merge view
    reports:
      junit:
        - "*/testresult.xml" 
      coverage_report:
        coverage_format: cobertura
        path: "./coverage/Cobertura.xml"
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_REF_NAME == "release"
    - if: $CI_COMMIT_REF_NAME == "develop"
  when:
    always
  allow_failure: false
  
code_quality_job:
  image: mcr.microsoft.com/dotnet/sdk:7.0
  stage: test
  script:
    - 'mv ci-nuget.config nuget.config'
    - 'dotnet tool restore'
    - 'dotnet build'
    - 'dotnet tool run roslynator analyze ./DotnetGitlabExample.sln -o roslynator.xml  || true' # run roslynator
    - 'dotnet tool run cq roslynator roslynator.xml gl-code-quality-report1.json %DIR' # convert roslynator into gitlab format
    - 'dotnet tool run cq sarif ClassLibrary1/codeanalysis.sarif.json gl-code-quality-report2.json %DIR' # convert sarif file into gitlab format
    - 'dotnet tool run cq sarif ConsoleApp1/codeanalysis.sarif.json gl-code-quality-report3.json %DIR' # convert sarif file into gitlab format
    - 'dotnet tool run cq sarif TestProject1/codeanalysis.sarif.json gl-code-quality-report4.json %DIR' # convert sarif file into gitlab format
    - 'dotnet tool run cq merge gl-code-quality-report.json gl-code-quality-report1.json gl-code-quality-report2.json gl-code-quality-report3.json gl-code-quality-report4.json' # merge all files
  artifacts:
    paths:
      - roslynator.xml
      - gl-code-quality-report.json
    expose_as: 'code_quality_reports'
    reports:
      codequality: gl-code-quality-report.json
  
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_REF_NAME == "release"
    - if: $CI_COMMIT_REF_NAME == "develop"
  when:
    always
  allow_failure: false
